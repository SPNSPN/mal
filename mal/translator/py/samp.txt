(define shift-indent
 (lambda (codes)
  (map (lambda (line) (sprint "\t" line)) codes)))

(! let ((counter -1))
 (define gen-lambda-name
  (lambda () (do (setq counter (+ counter 1))
			  	 (sprint "_sys_lambda_" counter)))))

(define +sys-var+ "_sys_var")


# if
(if (< a b) (+ 1 a) (- 1 b))

_sys_var = a < b
if _sys_var:
	_sys_var = 1 + a
else:
	_sys_var = 1 - b

(lambda (pred then else)
		(append (encode pred)
		 		(list (sprint "if " +sys-var+ ":"))
				(shift-indent (encode then))
				(list "else:")
				(shift-indent (encode else))))


# lambda
(lambda (g h) (* 2 g h))

def _sys_lambda_0 (g, h):
	_sys_var = 2 * g * h
	return _sys_var
_sys_var = _sys_lambda_0


(lambda (args body)
 (! let ((lambda-name (gen-lambda-name)))
		 (append (list (sprint "def " lambda-name " (" (join args ", ") "):"))
		 		(shift-indent (encode body))
				(list (sprint "\treturn " +sys-var+)
				 	  (sprint +sys-var+ " = " lambda-name)))))


# define
(define abc (+ 1 2 3))

_sys_var = 1 + 2 + 3
global abc
abc = _sys_var

(lambda (sym val)
 		(append (encode val)
		 		(list (sprint "global " sym)
				 	  (sprint sym " = " +sys-var+))))


# setq
(define bcd (cons 2 3))

_sys_var = cons(2, 3)
bcd = _sys_var

(lambda (sym val)
 		(append (encode val)
		 		(list (sprint sym " = " +sys-var+))))


# quote
(quote (1 2 3))

_sys_var = car(lread("(1 2 3)"))

(lambda (obj)
 		(list (sprint +sys-var+ " = car(lread(\"" obj "\"))")))


# do
(do (print "abc")
 	(* 2 4))

print("abc")
_sys_var = 2 * 4

(lambda exprs (map (lambda (expr) (encode expr)) exprs))


# and
(and 1 (if (< 2 1) nil t) nil)

_sys_var = 1
if not _sys_var is nil:
	_sys_var = 2 < 1
if not _sys_var is nil:
	_sys_var = nil
if not _sys_var is nil:
	_sys_var = t	
else:
	_sys_var = nil

(! letrec ((recur (lambda (head rest)
				   (if rest
					(append (list (shift-indent (encode head))
							 	  (sprint "if not " +sys-var+ "is nil:"))
					 		(recur (car rest) (cdr rest)))
					(append (shift-indent (encode head))
					 		(list (sprint "if not " +sys-var+ " is nil:")
							 	  (sprint "\t" +sys-var+ " = t")
								  "else:"
								  (sprint "\t" +sys-var+ " = nil")))))))
 (lambda exprs
  ))


